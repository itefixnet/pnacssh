Name=WINBASIC
Description=Windows basic checks
Version=1.0

<commands>
Processor load = .\bin\check_pdm\bin\check_pdm.exe --processor --warning 75 --critical 85
Disk C = .\bin\check_pdm\bin\check_pdm.exe --disk --drive C: --warning 90 --critical 95
Memory physical = .\bin\check_pdm\bin\check_pdm.exe --memory physical --warning 95 --critical 99
Memory virtual = .\bin\check_pdm\bin\check_pdm.exe --memory virtual --warning 90 --critical 95
Memory pagefile = .\bin\check_pdm\bin\check_pdm.exe --memory pagefile --warning 90 --critical 95
Eventlog errors = .\bin\check_winevent --type error --window ""5 minutes"" --critical 0
Eventlog audit failures = .\bin\check_winevent --log security --type ""audit failure"" --critical 0
Eventlog application errors = .\bin\check_winevent --log application --source ""Application Error"" --warning 2 --critical 5
</commands>

NagiosHostTemplate = <<EOFNHT
########
## host __HOSTNAME__ with passive checks, auto created by pnacssh
define host{
    use						$user-servers
    host_name				__HOSTNAME__
    alias					__HOSTNAME__
	active_checks_enabled 	0
	passive_checks_enabled 	1
	max_check_attempts		1
	check_command			check_dummy!2!\"Host is stale\"      
	check_freshness			1      
	freshness_threshold		3600
}

EOFNHT

NagiosServiceTemplate = <<EOFNST
######
## service __HOSTNAME__ - __COMMAND__ with passive checks, auto created by pnacssh
define service {
	use 					generic-service,srv-pnp
    host_name				__HOSTNAME__
    service_description		__HOSTNAME__ __COMMAND__
	active_checks_enabled	0
	passive_checks_enabled	1
	check_command			check_dummy!2!\"service is stale\"
	check_freshness			1      
	freshness_threshold 	3600
}		

EOFNST

PnacsshCollectorScript = <<EOFCS
set-strictmode -version Latest
$hostname="__HOSTNAME__"
$template="__TEMPLATE__"
$result_file=".\$hostname-$template.result"
# Standard set of services
$services = @{
__SERVICES__
}
$tempfile = [IO.Path]::GetTempFileName()
# Host result
"PROCESS_HOST_CHECK_RESULT;$hostname;0;Host appears to be UP" | Out-File -Encoding ASCII -Append -FilePath $tempfile
# Service checks
foreach ($service in $services.Keys) {
    $command = $services.Item($service)
    $result = Invoke-Expression "& $command"
    "PROCESS_SERVICE_CHECK_RESULT;$hostname;$hostname $service;$lastexitcode;$result" | Out-File -Encoding ASCII -Append -FilePath $tempfile
}
If (Test-Path $result_file){
	Remove-Item $result_file
}
Move-Item $tempfile $result_file
Start-Process -NoNewWindow -Wait -FilePath ".\bin\sftp.exe" -ArgumentList "-q -b .\pnacssh.sftp -P __PORT__ -o UserKnownHostsFile=__KNOWNHOSTFILE__ -i __PRIVATEKEY__  __USER__@__DATACOLLECTOR__"
EOFCS


